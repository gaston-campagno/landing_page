# .github/workflows/deploy.yml

name: Launch Infra
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  launch_ec2:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio de React (la app)
      - name: Checkout React Repo
        uses: actions/checkout@v3
        with:
          path: react-repo

      - name: PWD react-repo
        run: |
          pwd
          ls -a

        # Paso 3: Checkout del repositorio de Scripts de user_data
      - name: Checkout User Data Scripts Repo
        uses: actions/checkout@v3
        with:
          repository: gaston-campagno/scripts
          token: ${{ secrets.READ_TOKEN }}
          path: scripts-repo

      # Checkout del repositorio de Terraform
      - name: Checkout Terraform Repo
        uses: actions/checkout@v3
        with:
          repository: gaston-campagno/infra
          token: ${{ secrets.READ_TOKEN }}
          path: terraform-repo

      # Paso 2: Mover variables.tf, terraform.tfvars y security_group_rules.tf desde react-repo a terraform-repo
      - name: Move variables.tf, terraform.tfvars
        run: |
          cp react-repo/landing-page/variables.tf terraform-repo/variables.tf
          cp react-repo/landing-page/terraform.tfvars terraform-repo/terraform.tfvars

              # Mostrar el path actual
      - name: Mostrar path actual
        run: |
          ls -a
          pwd
          cd ..
          ls -a
          pwd
          cd ..
          ls -a
          pwd

      # Listar archivos del repo clonado
      - name: Listar archivos del repo clonado
        run: |
          ls -la

      # Paso 4: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.7

      # Paso 5: Inicializar Terraform
      - name: Initialize Terraform
        run: |
          pwd
          cd terraform-repo
          ls -a
          terraform init

      # Paso 1: Aplicar Terraform
      - name: Apply Terraform
        working-directory: terraform-repo
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -var "github_token=${{ secrets.READ_TOKEN }}" \
                          -auto-approve
                                    
          # Capturar los outputs de Terraform usando grep para evitar mensajes adicionales
          SECURITY_GROUP_ID=$(terraform output -raw security_group_id | grep -Eo 'sg-[0-9a-z]+' | head -n 1)
          EC2_INSTANCE_PUBLIC_IP=$(terraform output -raw ec2_instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          EC2_INSTANCE_ID=$(terraform output -raw ec2_instance_id | grep -Eo 'i-[0-9a-z]+' | head -n 1)
          
          # Validación para asegurarse de que las variables no están vacías
          if [ -z "$SECURITY_GROUP_ID" ] || [ -z "$EC2_INSTANCE_PUBLIC_IP" ] || [ -z "$EC2_INSTANCE_ID" ]; then
            echo "Error: no se pudieron capturar las variables de Terraform"
            exit 1
          fi

          # Guardar en GITHUB_ENV
          SECURITY_GROUP_ID=$(echo "$SECURITY_GROUP_ID" | tr -d '[:space:]')
          EC2_INSTANCE_PUBLIC_IP=$(echo "$EC2_INSTANCE_PUBLIC_IP" | tr -d '[:space:]')
          EC2_INSTANCE_ID=$(echo "$EC2_INSTANCE_ID" | tr -d '[:space:]')

          # Guardar las variables en GITHUB_ENV para hacerlas disponibles en pasos futuros
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
          echo "EC2_INSTANCE_PUBLIC_IP=$EC2_INSTANCE_PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" >> $GITHUB_ENV          
          
          # Imprimir los valores para verificar
          echo "Security Group ID: $SECURITY_GROUP_ID"
          echo "EC2 Public IP: $EC2_INSTANCE_PUBLIC_IP"
          echo "EC2 Instance ID: $EC2_INSTANCE_ID"

      - name: Guardar Variables en el Repositorio
        working-directory: scripts-repo

        run: |
          echo "github.repository: $GITHUB_REPOSITORY"
          echo "SECURITY_GROUP_ID: $SECURITY_GROUP_ID"
          echo "EC2_INSTANCE_PUBLIC_IP: $EC2_INSTANCE_PUBLIC_IP"
          echo "EC2_INSTANCE_ID: $EC2_INSTANCE_ID"
          echo "GITHUB_TOKEN: ${{ secrets.READ_TOKEN }}"
          
          chmod +x recordVar.sh
          ./recordVar.sh "$GITHUB_REPOSITORY" "SECURITY_GROUP_ID" "$SECURITY_GROUP_ID" "${{ secrets.READ_TOKEN }}"
          ./recordVar.sh "$GITHUB_REPOSITORY" "EC2_INSTANCE_PUBLIC_IP" "$EC2_INSTANCE_PUBLIC_IP" "${{ secrets.READ_TOKEN }}"
          ./recordVar.sh "$GITHUB_REPOSITORY" "EC2_INSTANCE_ID" "$EC2_INSTANCE_ID" "${{ secrets.READ_TOKEN }}"
          
