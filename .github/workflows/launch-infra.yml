# .github/workflows/deploy.yml

name: Launch Infra
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  launch_ec2:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio de React (la app)
      - name: Checkout React Repo
        uses: actions/checkout@v3

      # Checkout del repositorio de Terraform
      - name: Checkout Terraform Repo
        uses: actions/checkout@v3
        with:
          repository: gaston-campagno/infra
          token: ${{ secrets.READ_TOKEN }}

      # Paso 3: Checkout del repositorio de Scripts de user_data
      - name: Checkout User Data Scripts Repo
        uses: actions/checkout@v3
        with:
          repository: gaston-campagno/scripts
          token: ${{ secrets.READ_TOKEN }}

      # Paso 4: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Paso 5: Inicializar Terraform
      - name: Initialize Terraform
        run: |
          cd infra
          terraform init
        
      # Paso 6: Aplicar Terraform y capturar el output del Security Group ID y de la IP pública de la instancia
      - name: Apply Terraform and Capture Outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve
          # Guardar el ID del Security Group y la IP pública de la instancia en un archivo temporal para usarlo más tarde
          echo "SECURITY_GROUP_ID=$(terraform output -raw security_group_id)" >> $GITHUB_ENV
          echo "EC2_INSTANCE_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "EC2_INSTANCE_ID=$(terraform output -raw ec2_instance_id)" >> $GITHUB_ENV

            # Leer la lista de scripts
      - name: Read User Data Scripts
        id: read_scripts
        run: |
          SCRIPTS_LIST=$(grep -oP 'default\s*=\s*\[\K[^\]]+' ../terraform/variables.tf | tr -d ' ')
          echo "SCRIPTS_LIST=${SCRIPTS_LIST}" >> $GITHUB_ENV

      # Aplicar Terraform pasando la lista de scripts y el token de GitHub desde los secretos
      - name: Apply Terraform with Scripts and Token
        working-directory: terraform-code
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          READ_TOKEN: ${{ secrets.READ_TOKEN }}
        run: |
          terraform apply -var "user_data_scripts=${{ env.SCRIPTS_LIST }}" \
                          -var "github_token=${{ secrets.READ_TOKEN }}" \
                          -auto-approve

      # Paso 9: Guardar Variables en el Repositorio
      - name: Guardar Variables en el Repositorio
        run: |
          # Guarda la IP pública de la instancia
          echo "Guardando EC2_INSTANCE_PUBLIC_IP en Variables del Repositorio"
          gh api -X PUT /repos/$GITHUB_REPOSITORY/actions/variables/EC2_INSTANCE_PUBLIC_IP \
            -f value=${{ env.EC2_INSTANCE_PUBLIC_IP }}

          # Guarda el ID de la instancia
          echo "Guardando EC2_INSTANCE_ID en Variables del Repositorio"
          gh api -X PUT /repos/$GITHUB_REPOSITORY/actions/variables/EC2_INSTANCE_ID \
            -f value=${{ env.EC2_INSTANCE_ID }}
